
%{
#include <stdio.h>
#include <iostream>
#include <string.h>
#include "symTab.h"
using namespace std;
int yylex (void);
void yyerror(char const *s);
#define YYDEBUG 1
int success = 1;
const char* typ;
%}

%locations

%union {
    struct attr{
        char* value;
        char* type;
        int size;
    }structType;
    int integer ; 
    float fc ; 
    char *string;
}

%token <string> STR IF ELSE PRINT FOR DO NOP READ THEN ID COMMENT RELATIONAL_OP
%token <integer> IC INT
%token <fc> FC REAL

%define parse.error verbose

%left '|'
%left '&'
%left '~'

%left '+' '-'
%left '*' '/'

%start p

%%

p: dl sl
    ;

dl: d ';' dl
    | %empty
    ;

d: ty vl
    ;

ty: INT                    {typ = "int";}
    | REAL                 {typ = "float";}
    ;

vl: vl ',' ID           { if (!searchSymTab($3))
                            insertSymTab($3, typ, sizeof(typ));
                          else{
                              cout<<$3;
                              yyerror(" re-declared");
                                }
                            }
    | ID                { if (!searchSymTab($1))
                            insertSymTab($1, typ, sizeof(typ));
                          else{
                                cout<<$1;
                                yyerror(" re-declared");
                                }
                            }
    ;

sl: s sl                
    | s                
    ;

s: as 
    | is 
    | ls                                
    | ios               
    | NOP               
    ;

as: ID '=' e                {if (!searchSymTab($1)){
                                insertSymTab($1, "undefined", -1);
                                cout<<$1;
                                yyerror(" is not defined") ;} 
                            }
    ;

is: IF be THEN sl ELSE sl ';'   
    ;

ls: FOR be DO sl ';'        
    ;

ios: PRINT pe
    | READ ID               {if (!searchSymTab($2)){
                                insertSymTab($2, "undefined", -1);
                                cout<<$2;
                                yyerror(" is not defined") ;} 
                            }
    ;

pe: e                      
    | STR                   
    ;

be: be '|' be               
    | be '&' be             
    | '~' be                
    | '(' be ')'            
    | re                    
    ;

re:  e RELATIONAL_OP e
    ;

e:    e '+' e            
    | e '-' e          
    | e '*' e             
    | e '/' e               
    | '(' e ')'             
    | ID                {if (!searchSymTab($1)){
                            insertSymTab($1, "undefined", -1);
                                cout<<$1;
                                yyerror(" is not defined") ;} }
    | IC
    | FC                                 
    ;

%%

int main(){
    yyparse();
    if(success){
        cout<< "\nParsing Successful \n" << endl;
        cout<<"This Code is not even opened by me once." << endl;
        printTable();
        return 0;
    }
    cout<<"This Code is not even opened by me once." << endl;
    cout << "\nParsing Failed \n"<< endl;  
    printTable(); 
}

void yyerror(char const *s) {
    extern int yylineno;
    cerr << s <<" at line No.:"<< yylineno <<endl;
    success = 0;
}
